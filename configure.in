AC_INIT(TntZenoReader, 1.0.2, [Tommi Maekitalo <tommi@tntnet.org>])
AM_INIT_AUTOMAKE([subdir-objects])

abi_current=0
abi_revision=0
abi_age=0
sonumber=${abi_current}:${abi_revision}:${abi_age}
AC_SUBST(sonumber)

AC_CONFIG_HEADERS([src/config.h])
AC_CONFIG_SRCDIR([src/zenolib/file.cpp])

AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_CXX
AC_PROG_LIBTOOL
AC_CHECK_HEADER([zlib.h], , AC_MSG_ERROR([zlib header not found]))
AC_CHECK_HEADER([bzlib.h], , AC_MSG_ERROR([bzip2 header files not found]))

AC_LANG(C++)
AC_SUBST(tntnetdir, [${libdir}/tntnet])

AC_MSG_CHECKING([for cxxtools usability])
AC_COMPILE_IFELSE(
  [#include <cxxtools/net.h>
   #include <cxxtools/pipe.h>
   void t() { cxxtools::net::Socket s;
              struct sockaddr_storage t = s.getSockAddr(); }
  ],
  AC_MSG_RESULT(yes),
  [
    AC_MSG_RESULT(no)
    AC_MSG_ERROR(please check your cxxtools-installation - maybe you need an upgrade)
  ]
  )

AC_ARG_WITH([reader],
    AS_HELP_STRING([--with-reader=yes|no], [compile TntReader application (default is yes)]),
    [with_reader=$withval],
    [with_reader=yes])

case "$with_reader" in
    yes|no)
        ;;
    *)
        AC_MSG_ERROR([unknown value "$with_reader" for --with-reader])
        ;;
esac

AC_ARG_WITH([writer],
    AS_HELP_STRING([--with-writer=yes|no], [compile applications to create zeno files (default is yes)]),
    [with_writer=$withval],
    [with_writer=yes])

case "$with_writer" in
    yes|no)
        ;;
    *)
        AC_MSG_ERROR([unknown value "$with_writer" for --with-writer])
        ;;
esac

AM_CONDITIONAL(MAKE_TNTREADER, test "$with_reader" = "yes")
AM_CONDITIONAL(MAKE_ZENOWRITER, test "$with_writer" = "yes")

if test "$with_reader" = "yes"
then
    AC_CHECK_HEADER([tnt/tntnet.h], , AC_MSG_ERROR([tntnet not found]))
fi

# output
AC_CONFIG_FILES([
  Makefile
  src/zenolib/Makefile
  src/zenoDump/Makefile
  src/webapp/Makefile
  src/wikidownloader/Makefile
  src/zenowriter/Makefile
  src/zenoindexer/Makefile
  include/Makefile
  ])

AC_OUTPUT
