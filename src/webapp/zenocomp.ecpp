<%config>
bool DisableCache = false;
Charset = "iso-8859-1";
</%config>
<%include>global.ecpp</%include>
<%cpp>

  if (request.getArgs().size() == 0)
    return DECLINED;

  std::string host = request.getHeader(tnt::httpheader::host);
  if (host.empty())
    host = "localhost";

  zeno::File file;

  if (request.getArgs().size() > 0)
  {
    std::string zenoFileName = request.getArg(0);
    if (zenoFileName == ZenoFile)
      file = articleFile;
    else if (zenoFileName == ZenoIndex)
      file = indexFile;
    else if (zenoFileName == ZenoImages)
      file = imagesFile;
    else
    {
      ZenoFilesType::const_iterator it = zenoFiles.find(zenoFileName);
      if (it == zenoFiles.end())
      {
        file = zeno::File(zenoFileName);
        zenoFiles[zenoFileName] = file;
      }
      else
      {
        file = it->second;
      }
    }
  }

  zeno::QUnicodeString pathInfo = zeno::QUnicodeString::fromUtf8(request.getPathInfo());
  if (DisableCache || article.getUrl() != pathInfo)
  {
    log_debug("search article \"" << pathInfo << "\" in file \"" << file.getFilename() << '"');
    article = file.getArticle(pathInfo);
  }
  else
    log_debug("article " << pathInfo);

  if (!article)
  {
    log_warn("article " << pathInfo << " not found");
    return DECLINED;
  }
  else
  {
    log_debug("article " << pathInfo << " fetched - mime-type "
      << article.getLibraryMimeType());

    if (article.getLibraryMimeType() != zeno::Dirent::zenoMimeTextHtml)
    {
      log_debug("send non-html data");
      callComp("article", request, reply, qparam);
      return HTTP_OK;
    }
  }

  title = article.getTitle();

  int type = request.getPathInfo()[0] == '-' ? typeSpecial : typeArticle;

</%cpp>
<& skin qparam nextComp="article" type=(type) >
