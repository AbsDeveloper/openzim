<%include>global.ecpp</%include>
<%args>
go; // Artikel
ft; // Volltext
</%args>
<%pre>
#include <zeno/search.h>
#include <zeno/fileiterator.h>
</%pre>
<%config>
double weightOcc = zeno::Search::getWeightOcc();
double weightOccOff = zeno::Search::getWeightOccOff();
double weightDist = zeno::Search::getWeightDist();
double weightPos = zeno::Search::getWeightPos();
double weightDistinctWords = zeno::Search::getWeightDistinctWords();
</%config>
<%cpp>

  zeno::Search::setWeightOcc(weightOcc);
  zeno::Search::setWeightOccOff(weightOccOff);
  zeno::Search::setWeightDist(weightDist);
  zeno::Search::setWeightPos(weightPos);
  zeno::Search::setWeightDistinctWords(weightDistinctWords);

  if (!go.empty())
    return articlesearch(request, reply, qparam);

  if (!ft.empty())
    return fulltext(request, reply, qparam);

  if (!articles.empty()) {
</%cpp>
<& skin qparam nextComp="searcharticles" type=(typeSpecial) >
<%cpp>
  }
  else if (!result.empty())
  {
</%cpp>
<& skin qparam nextComp="searchresults" type=(typeSpecial) >
<%cpp>
}

</%cpp>
<%def articlesearch>
<%args>
e;  // Begriff
</%args>
<%cpp>

  result.clear();

  log_debug("search article \"" << e << '"');

  articles.clear();
  for (zeno::File::const_iterator it = articleFile.begin(); it != articleFile.end(); ++it)
  {
    std::string title = it->getTitle().toUtf8();
    if (title.find(e) != std::string::npos)
      articles.push_back(*it);
  }

  title = zeno::QUnicodeString("Artikelsuche nach: " + e);

</%cpp>
<& skin qparam nextComp="searcharticles" type=(typeSpecial) >
</%def>
%
<%def fulltext>
<%args>
e;  // Begriff
</%args>
<%cpp>

  articles.clear();

  log_debug("search expression \"" << e << '"');
  zeno::Search search(indexFile, articleFile);
  result = search.search(e);

  log_debug(result.size() << " articles found");

  title = zeno::QUnicodeString("Suche nach: " + e);

</%cpp>
<& skin qparam nextComp="searchresults" type=(typeSpecial) >
</%def>
